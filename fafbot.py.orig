from irc import bot as ircbot
from irc import client
from irc.bot import Channel
import time
from PySide import QtSql, QtCore
import re

from fractions import Fraction



from threading import Timer
from trueSkill.GameInfo import GameInfo
from trueSkill.TrueSkill.FactorGraphTrueSkillCalculator import FactorGraphTrueSkillCalculator
from trueSkill.Team import Team
from trueSkill.Rating import Rating
from trueSkill.Teams import Teams

class betmatch(object):
    def __init__(self, uid, startTime, name, odds, mostProbableWinner):
        self.uid = uid
        self.startTime = startTime
        self.pot = 0
        self.players = {}
        self.betOn = {}
        self.name = name
        self.odds = odds
        self.mostProbableWinner = mostProbableWinner

    def computeReward(self, amount):
        maxTime = (30.0 * 60.0)
        minTime = (2 * 60)
        if (time.time() - self.startTime) > minTime:
            return amount*(1.0-((time.time() - self.startTime) / maxTime))
        else:
            return amount

    def addBeter(self, amount, uid, betUid):
        maxBet = self.computeReward(amount)
        if not uid in self.players :
            self.players[uid] = maxBet
        if not betUid in self.betOn:
            self.betOn[betUid] =  []
        self.betOn[betUid].append(uid)
        return maxBet

    def getBetWinners(self, uid):
        if uid in self.betOn :
            return self.betOn[uid]
        else:
            return None

    def getReward(self, uid):
        if uid in self.players:
            return self.players[uid]
        return 0

class bettingSystem(object):
    def __init__(self):
        self.matches = {}

    def addMatch(self, match):
        if not match.uid in self.matches:
            self.matches[match.uid] = match
        return self.matches[match.uid]

    def getMatches(self):
        return self.matches

    def deleteMatch(self, uid):
        if uid in self.matches:
            del self.matches[uid]


class BotModeration(ircbot.SingleServerIRCBot):
    def __init__(self):
        """
        Constructeur qui pourrait prendre des parametres dans un "vrai" programme.
        """
        ircbot.SingleServerIRCBot.__init__(self, [("faforever.com", 6667)],
                                           "fafbot", "FAF bot")
        self.nickpass = "fafbotthegreat"
        self.nickname = "fafbot"

        self.db = QtSql.QSqlDatabase.addDatabase("QMYSQL")
        self.db.setHostName("localhost")  
        self.db.setPort(3306)

        self.db.setDatabaseName("faf_lobby")  
        self.db.setUserName("faf_lobby")  
        self.db.setPassword("dD9J9zMvdCrLZF5Q")

        self.betting = bettingSystem()

        Timer(30, self.betCheck).start()

    def isOver(self, uid):
        query = QtSql.QSqlQuery(self.db)
        query.prepare("SELECT * FROM `game_stats` WHERE `id` = ? AND EndTime IS NOT NULL ")
        query.addBindValue(uid)
        query.exec_()
        if query.size() > 0:
            return True
        return False

    def getWinner(self, uid):
        query = QtSql.QSqlQuery(self.db)
        query.prepare("SELECT `playerId`, score FROM `game_player_stats` WHERE `gameId` = ?")
        query.addBindValue(uid)
        query.exec_()
        results = {}
        if query.size() > 0:
            while query.next():
                player = int(query.value(0))
                score = int(query.value(1))
                results[score] = player
            return results[max(results)]
        return None

    def getNameFromUid(self, uid):
        query = QtSql.QSqlQuery(self.db)
        query.prepare("(SELECT login FROM faf_lobby.login WHERE id = ? )")
        query.addBindValue(uid)
        query.exec_()
        if query.size() > 0:
            query.first()
            return str(query.value(0))
        else:
            return None        

    def getOdds(self, match):
        odds = match.odds 
        text = "Odds are %0.2f to 1 in favor of %s" % (Fraction(1.0/odds), self.getNameFromUid(match.mostProbableWinner))
        return text

    def betCheck(self):
        print "checking bets"
        matches = self.betting.getMatches()
        matchsToDelete = []
        for uid in matches:
            print "checking", uid
            if self.isOver(uid):
                print "game is over"
                winnerUid = self.getWinner(uid)
                match = matches[uid]
                odds = match.odds
                ratio = 0
                print "winner is", winnerUid
                print "most probable winner was", match.mostProbableWinner  
                if match.mostProbableWinner == winnerUid:
                    #the most probable winner is the winner, so the odds are in defavor of the winner.
                    ratio = odds
                else:
                    # we are defeating the odd !
                    ratio = 1.0 + (1.0-odds)

                betWinners = match.getBetWinners(winnerUid)
                winnerSize = len(betWinners)
                loserSize = len(match.players) - winnerSize
                
                print "winners :", winnerUid
                if betWinners:
                    text = []

                    for betwinnerUid in betWinners:
                        reward = match.getReward(betwinnerUid) 
                        reward = reward + reward * ratio
                        self.addToBalance(reward, betwinnerUid)
                        text = ("%s has won %i on the match \"%s\" (winner was %s). He has now %i credits.") % (self.getNameFromUid(betwinnerUid), reward, match.name, self.getNameFromUid(winnerUid), self.currentBalance(betwinnerUid))
                        self.connection.privmsg("#aeolus", text)
                else :
                    text = ("no winner for %s!" % (match.name))
                    self.connection.privmsg("#aeolus", text)

                text = ("%i gambler(s) for the winner, %i for the loser.") % (winnerSize, loserSize)
                self.connection.privmsg("#aeolus", text)
                matchsToDelete.append(uid)
                
        for uid in matchsToDelete:
            self.betting.deleteMatch(uid)

        Timer(30, self.betCheck).start()

    def currentBalance(self, uid):
        query = QtSql.QSqlQuery(self.db)
        query.prepare("SELECT amount FROM faf_lobby.bet WHERE userid = ?")
        query.addBindValue(uid)
        query.exec_()
        if query.size() == 0:
            query3 = QtSql.QSqlQuery(self.db)
            query3.prepare("INSERT INTO `bet`(`userid`, `amount`) VALUES (?,100)")
            query3.addBindValue(uid)
            query3.exec_()
            return 100
        else:
            query.first()
            return int(query.value(0))

    def getUid(self, nickname):
        query = QtSql.QSqlQuery(self.db)
        query.prepare("(SELECT id FROM faf_lobby.login WHERE login = ? )")
        query.addBindValue(nickname)
        query.exec_()
        if query.size() > 0:
            query.first()
            return int(query.value(0))
        else:
            return None

    def getBalanceIndex(self, uid):
        query = QtSql.QSqlQuery(self.db)
        print "checking game", uid
        query.prepare("SELECT playerId, mean, deviation FROM `game_player_stats` WHERE `gameId` = ?")
        query.addBindValue(uid)
        query.exec_()
        if query.size() > 0:
            query.first()
            playeruid = int(query.value(0))
            mean = float(query.value(1))
            dev = float(query.value(2))
            rating1 = mean - 3.0 * dev
            team1 = Team()
            print "rating1", rating1 
            team1.addPlayer(str(playeruid), Rating(mean, dev))  
            mostProbableWinner = playeruid  
            
            query.next()        
            playeruid = int(query.value(0))
            mean = float(query.value(1))
            dev = float(query.value(2))
            rating2 = mean - 3.0 * dev
            print "rating1", rating2
            team2 = Team()
            team2.addPlayer(str(playeruid), Rating(mean, dev))

            teams = Teams.concat(team1, team2)

            gameInfo = GameInfo()
            calculator = FactorGraphTrueSkillCalculator()
            odds = calculator.calculateMatchQuality(gameInfo, teams)

            if rating1 < rating2 :
                mostProbableWinner = playeruid
            
            return mostProbableWinner, odds
        return 1, 1
                                
    def getMatches(self, uid):
        query = QtSql.QSqlQuery(self.db)
        query.prepare("SELECT game_stats.id, startTime, gameName FROM `game_player_stats` \
LEFT JOIN game_stats on game_stats.id = game_player_stats.gameId \
WHERE `playerId` = ? \
AND gameMod = 6 \
AND startTime > (NOW() - INTERVAL 30 MINUTE) \
AND EndTime IS NULL ")
        query.addBindValue(uid)
        query.exec_()
        if query.size() > 0:
            query.first()
            uid = int(query.value(0))
            startTime = query.value(1).toTime_t()
            name = str(query.value(2))
            mostProbableWinner, odds = self.getBalanceIndex(uid)
            return betmatch(uid, startTime, name, odds, mostProbableWinner)
        else :
            return None

    def addToBalance(self, amount, uid):
        query = QtSql.QSqlQuery(self.db)
        query.prepare("UPDATE faf_lobby.bet SET amount = amount + ? WHERE userid = ?")
        query.addBindValue(amount)
        query.addBindValue(uid)
        query.exec_()

    def updateBalance(self, amount, uid):
        query = QtSql.QSqlQuery(self.db)
        query.prepare("UPDATE faf_lobby.bet SET amount = ? WHERE userid = ?")
        query.addBindValue(amount)
        query.addBindValue(uid)
        query.exec_()

    def on_pubmsg(self, c, e):
        source  = e.source.nick
        message = e.arguments[0]
        if message.startswith("!odds"):
            m = re.search(r"^!odds\s(.+)", message)
            if m:
                self.db.open()
                who = str(m.group(1))
                print "who"
                playeruid = self.getUid(who)
                if not playeruid:
                    print "no player uid"
                    return
                match = self.getMatches(playeruid)
                if match :
                    text =self.getOdds(match)
                    self.connection.privmsg("#aeolus", text)

        elif message.startswith("!balance"):
            self.db.open()
            uid = self.getUid(source)
            if uid:

                balance = self.currentBalance(uid)
                text = "%s has : %i credits." % (source, balance)
                self.connection.privmsg("#aeolus", text)


        elif message.startswith("!bet"):
            if message.startswith("!bet"):
                m = re.search(r"^!bet\s(\d+)\son\s(.+)", message)
                if m:
                    print "find regexp"
                    amount = min(50,int(m.group(1)))
                    who = str(m.group(2))
                    print amount, who
                    # we check if the source has money
                    self.db.open()
                    uid = self.getUid(source)
                    if not uid:
                        print "no uid"
                        return

                    playeruid = self.getUid(who)
                    if not playeruid:
                        print "no player uid"
                        return

                    match = self.getMatches(playeruid)
                    if not match:
                        print "no match"
                        return

                    match = self.betting.addMatch(match)
                    if not match:
                        print "no match 2"
                        return

                    balance = self.currentBalance(uid)
                    resultAmount = match.addBeter(amount, uid, playeruid)
                    if resultAmount < amount:
                        text = "%s has taken a bet of %i (amount reduced due to the in-game time) on \"%s\" (his balance is now %i)." % (source, resultAmount, match.name, balance-resultAmount)
                        self.connection.privmsg("#aeolus", text)
                        self.updateBalance(balance-resultAmount, uid)       
                    else :                        
                        text = "%s has taken a bet of %i on \"%s\" (his balance is now %i)." % (source, amount, match.name, balance-amount)
                        self.connection.privmsg("#aeolus", text)
                        self.updateBalance(balance-amount, uid)

    def on_welcome(self, c, e):
        """

        """
        #self.connection.join("#aeolus")
        
        if self.nickpass and c.get_nickname() != self.nickname:
            # Reclaim our desired nickname
            print "nick on use"
            c.privmsg('nickserv', 'ghost %s %s' % (self.nickname, self.nickpass))

    def on_privnotice(self, c, e):
        
        source = e.source.nick        
        print source, e.arguments[0]
        if source and source.lower() == 'nickserv':
            if 'IDENTIFY' in e.arguments[0] :
                # Received request to identify
                print "identifying"
                if self.nickpass and self.nickname == c.get_nickname():
                    self.connection.privmsg('nickserv', 'identify %s %s' % (self.nickname, self.nickpass))
                    
            elif "Password accepted" in e.arguments[0]:
                print "password accepted, joining"
                time.sleep(1)
                self.connection.join("#aeolus")
 
 
    def _on_join(self, c, e):
        ch = e.target
        nick = e.source.nick
        if nick == c.get_nickname():
            self.channels[ch] = Channel()
            self.connection.send_raw("PRIVMSG %s :%s" % ("#aeolus", "yo!"))
            
        else :
            print nick,"has joined", ch
            self.db.open()
            query = QtSql.QSqlQuery(self.db)
            query.prepare("SELECT faction FROM galacticwar.accounts WHERE uid = (SELECT id FROM faf_lobby.login WHERE login = ? )")
            query.addBindValue(nick)
            query.exec_()
            if query.size() > 0:
                query.first()
                faction = int(query.value(0))
                if faction == 0 :
                    channel = "#UEF"
                elif faction == 1 :
                    channel = "#Aeon"
                elif faction == 2 :
                    channel = "#Cybran"
                elif faction == 3 :
                    channel = "#Seraphim"

                self.connection.privmsg('chanserv', 'INVITE %s %s' % (channel, nick))

                    
                    
            
        
        self.channels[ch].add_user(nick)
 
        
 
if __name__ == "__main__":
    BotModeration().start()